import UIKit

/*
 
 Часть 1.
 Для начала нужно описать машину минимальным набором параметров, используя протокол.

 Алгоритм выполнения

 Создайте протокол 'Car’
 Добавьте в него свойства:
 ‘model’ (только для чтения): марка
 ‘color’ (только для чтения): цвет
 ‘buildDate’ (только для чтения): дата выпуска
 ‘price’ (чтение и запись): цена авто
 ‘accessories’ (чтение и запись): дополнительное оборудование (тонировка, сингнализация, спортивные диски)
 ‘isServiced’ (чтение и запись): сделана ли предпродажная подготовка. Обычно ее делают в дилерских центрах перед постановкой машины в салон.

 
 */


enum Accessories {
    case tinting
    case alarmSystem
    case sportsDiscs
}

protocol Car {
    
    var model: String { get }
    var color: String { get }
    var buildDate: Int { get }
    var price: Double { get set }
    var accessories: Accessories { get set }
    var isServiced: Bool { get set }
    
}

/*
 
 Часть 2.
 По аналогии с протоколом ‘Car’, нужно описать дилерский центр минимальным набором свойств и методов, используя протокол.

 Алгоритм выполнения

 Создайте протокол ‘Dealership’
 Добавьте свойства:
 ‘name’ (только для чтения): название дилерского центра (назвать по марке машины для упрощения)
 ‘showroomCapacity’ (только для чтения): максимальная вместимость автосалона по количеству машин.
 ‘stockCars’ (массив, чтение и запись): машины, находящиеся на парковке склада. Представим, что парковка не имеет лимита по количеству машин.
 ‘showroomCars’ (массив, чтение и запись): машины, находящиеся в автосалоне.
 ‘cars’ (массив, чтение и запись): хранит список всех машин в наличии.
 Добавьте методы:
 ‘offerAccesories(_ :)’: принимает массив акксесуаров в качестве параметра. Метод предлагает клиенту купить доп. оборудование.
 ‘presaleService(_ :)’: принимает машину в качестве параметра. Метод отправляет машину на предпродажную подготовку.
 ‘addToShowroom(_ :)’: также принимает машину в качестве параметра. Метод перегоняет машину с парковки склада в автосалон, при этом выполняет предпродажную подготовку.
 ‘sellCar(_ :)’: также принимает машину в качестве параметра. Метод продает машину из автосалона при этом проверяет, выполнена ли предпродажная подготовка. Также, если у машины отсутсвует доп. оборудование, нужно предложить клиенту его купить. (давайте представим, что клиент всегда соглашается и покупает :) )
 ‘orderCar()’: не принимает и не возвращает параметры. Метод делает заказ новой машины с завода, т.е. добавляет машину на парковку склада.
 Обратите внимание! Каждый метод должен выводить в консоль информацию о машине и выполненном действии с ней.
 
 */


protocol Dealership {
    var name: String { get } // название дилерского центра (назвать по марке машины для упрощения)
    var showroomCapacity: Int { get } // максимальная вместимость автосалона по количеству машин
    var stockCars: Array<Any> { get set } // машины, находящиеся на парковке склада. Представим, что парковка не имеет лимита по количеству машин.
    var showroomCars: Array<Any> { get set } // машины, находящиеся в автосалоне.
    var cars: Array<Any> { get set } // хранит список всех машин в наличии.
    
    func offerAccesories() // принимает массив акксесуаров в качестве параметра. Метод предлагает клиенту купить доп. оборудование.
    func presaleService() // принимает машину в качестве параметра. Метод отправляет машину на предпродажную подготовку.
    func addToShowroom() // также принимает машину в качестве параметра. Метод перегоняет машину с парковки склада в автосалон, при этом выполняет предпродажную подготовку.
    func sellCar() // также принимает машину в качестве параметра. Метод продает машину из автосалона при этом проверяет, выполнена ли предпродажная подготовка. Также, если у машины отсутсвует доп. оборудование, нужно предложить клиенту его купить. (давайте представим, что клиент всегда соглашается и покупает :) )
    func orderCar() //  не принимает и не возвращает параметры. Метод делает заказ новой машины с завода, т.е. добавляет машину на парковку склада.

}
